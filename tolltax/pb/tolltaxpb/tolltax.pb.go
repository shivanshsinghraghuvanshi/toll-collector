// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.3
// source: tolltax.proto

package tolltaxpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Owner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ownerid       int64  `protobuf:"varint,1,opt,name=ownerid,proto3" json:"ownerid,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Accountnumber int64  `protobuf:"varint,3,opt,name=accountnumber,proto3" json:"accountnumber,omitempty"`
}

func (x *Owner) Reset() {
	*x = Owner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tolltax_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Owner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Owner) ProtoMessage() {}

func (x *Owner) ProtoReflect() protoreflect.Message {
	mi := &file_tolltax_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Owner.ProtoReflect.Descriptor instead.
func (*Owner) Descriptor() ([]byte, []int) {
	return file_tolltax_proto_rawDescGZIP(), []int{0}
}

func (x *Owner) GetOwnerid() int64 {
	if x != nil {
		return x.Ownerid
	}
	return 0
}

func (x *Owner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Owner) GetAccountnumber() int64 {
	if x != nil {
		return x.Accountnumber
	}
	return 0
}

type Car struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Carid     int64  `protobuf:"varint,1,opt,name=carid,proto3" json:"carid,omitempty"`
	Make      string `protobuf:"bytes,2,opt,name=make,proto3" json:"make,omitempty"`
	Cartype   string `protobuf:"bytes,3,opt,name=cartype,proto3" json:"cartype,omitempty"`
	Carnumber string `protobuf:"bytes,4,opt,name=carnumber,proto3" json:"carnumber,omitempty"`
}

func (x *Car) Reset() {
	*x = Car{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tolltax_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Car) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Car) ProtoMessage() {}

func (x *Car) ProtoReflect() protoreflect.Message {
	mi := &file_tolltax_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Car.ProtoReflect.Descriptor instead.
func (*Car) Descriptor() ([]byte, []int) {
	return file_tolltax_proto_rawDescGZIP(), []int{1}
}

func (x *Car) GetCarid() int64 {
	if x != nil {
		return x.Carid
	}
	return 0
}

func (x *Car) GetMake() string {
	if x != nil {
		return x.Make
	}
	return ""
}

func (x *Car) GetCartype() string {
	if x != nil {
		return x.Cartype
	}
	return ""
}

func (x *Car) GetCarnumber() string {
	if x != nil {
		return x.Carnumber
	}
	return ""
}

type Netc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fkownerid int64 `protobuf:"varint,1,opt,name=fkownerid,proto3" json:"fkownerid,omitempty"`
	Fkcarid   int64 `protobuf:"varint,2,opt,name=fkcarid,proto3" json:"fkcarid,omitempty"`
}

func (x *Netc) Reset() {
	*x = Netc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tolltax_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Netc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Netc) ProtoMessage() {}

func (x *Netc) ProtoReflect() protoreflect.Message {
	mi := &file_tolltax_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Netc.ProtoReflect.Descriptor instead.
func (*Netc) Descriptor() ([]byte, []int) {
	return file_tolltax_proto_rawDescGZIP(), []int{2}
}

func (x *Netc) GetFkownerid() int64 {
	if x != nil {
		return x.Fkownerid
	}
	return 0
}

func (x *Netc) GetFkcarid() int64 {
	if x != nil {
		return x.Fkcarid
	}
	return 0
}

type TollBooth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tollboothid   int64  `protobuf:"varint,1,opt,name=tollboothid,proto3" json:"tollboothid,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Accountnumber int64  `protobuf:"varint,3,opt,name=accountnumber,proto3" json:"accountnumber,omitempty"`
}

func (x *TollBooth) Reset() {
	*x = TollBooth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tolltax_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TollBooth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TollBooth) ProtoMessage() {}

func (x *TollBooth) ProtoReflect() protoreflect.Message {
	mi := &file_tolltax_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TollBooth.ProtoReflect.Descriptor instead.
func (*TollBooth) Descriptor() ([]byte, []int) {
	return file_tolltax_proto_rawDescGZIP(), []int{3}
}

func (x *TollBooth) GetTollboothid() int64 {
	if x != nil {
		return x.Tollboothid
	}
	return 0
}

func (x *TollBooth) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TollBooth) GetAccountnumber() int64 {
	if x != nil {
		return x.Accountnumber
	}
	return 0
}

type GenerateRFIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Netc *Netc `protobuf:"bytes,1,opt,name=netc,proto3" json:"netc,omitempty"`
}

func (x *GenerateRFIDRequest) Reset() {
	*x = GenerateRFIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tolltax_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateRFIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateRFIDRequest) ProtoMessage() {}

func (x *GenerateRFIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tolltax_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateRFIDRequest.ProtoReflect.Descriptor instead.
func (*GenerateRFIDRequest) Descriptor() ([]byte, []int) {
	return file_tolltax_proto_rawDescGZIP(), []int{4}
}

func (x *GenerateRFIDRequest) GetNetc() *Netc {
	if x != nil {
		return x.Netc
	}
	return nil
}

type GenerateRFIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Rfid   string `protobuf:"bytes,2,opt,name=rfid,proto3" json:"rfid,omitempty"`
}

func (x *GenerateRFIDResponse) Reset() {
	*x = GenerateRFIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tolltax_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateRFIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateRFIDResponse) ProtoMessage() {}

func (x *GenerateRFIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tolltax_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateRFIDResponse.ProtoReflect.Descriptor instead.
func (*GenerateRFIDResponse) Descriptor() ([]byte, []int) {
	return file_tolltax_proto_rawDescGZIP(), []int{5}
}

func (x *GenerateRFIDResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GenerateRFIDResponse) GetRfid() string {
	if x != nil {
		return x.Rfid
	}
	return ""
}

type ValidateRFIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rfid  string `protobuf:"bytes,1,opt,name=rfid,proto3" json:"rfid,omitempty"`
	Carid int64  `protobuf:"varint,2,opt,name=carid,proto3" json:"carid,omitempty"`
}

func (x *ValidateRFIDRequest) Reset() {
	*x = ValidateRFIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tolltax_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRFIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRFIDRequest) ProtoMessage() {}

func (x *ValidateRFIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tolltax_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRFIDRequest.ProtoReflect.Descriptor instead.
func (*ValidateRFIDRequest) Descriptor() ([]byte, []int) {
	return file_tolltax_proto_rawDescGZIP(), []int{6}
}

func (x *ValidateRFIDRequest) GetRfid() string {
	if x != nil {
		return x.Rfid
	}
	return ""
}

func (x *ValidateRFIDRequest) GetCarid() int64 {
	if x != nil {
		return x.Carid
	}
	return 0
}

type ValidateRFIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *ValidateRFIDResponse) Reset() {
	*x = ValidateRFIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tolltax_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRFIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRFIDResponse) ProtoMessage() {}

func (x *ValidateRFIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tolltax_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRFIDResponse.ProtoReflect.Descriptor instead.
func (*ValidateRFIDResponse) Descriptor() ([]byte, []int) {
	return file_tolltax_proto_rawDescGZIP(), []int{7}
}

func (x *ValidateRFIDResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type DeductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Owner  *Owner `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *DeductRequest) Reset() {
	*x = DeductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tolltax_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeductRequest) ProtoMessage() {}

func (x *DeductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tolltax_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeductRequest.ProtoReflect.Descriptor instead.
func (*DeductRequest) Descriptor() ([]byte, []int) {
	return file_tolltax_proto_rawDescGZIP(), []int{8}
}

func (x *DeductRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DeductRequest) GetOwner() *Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

type DeductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *DeductResponse) Reset() {
	*x = DeductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tolltax_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeductResponse) ProtoMessage() {}

func (x *DeductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tolltax_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeductResponse.ProtoReflect.Descriptor instead.
func (*DeductResponse) Descriptor() ([]byte, []int) {
	return file_tolltax_proto_rawDescGZIP(), []int{9}
}

func (x *DeductResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type CreditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount string     `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Booth  *TollBooth `protobuf:"bytes,2,opt,name=booth,proto3" json:"booth,omitempty"`
}

func (x *CreditRequest) Reset() {
	*x = CreditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tolltax_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditRequest) ProtoMessage() {}

func (x *CreditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tolltax_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditRequest.ProtoReflect.Descriptor instead.
func (*CreditRequest) Descriptor() ([]byte, []int) {
	return file_tolltax_proto_rawDescGZIP(), []int{10}
}

func (x *CreditRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *CreditRequest) GetBooth() *TollBooth {
	if x != nil {
		return x.Booth
	}
	return nil
}

type CreditResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *CreditResponse) Reset() {
	*x = CreditResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tolltax_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditResponse) ProtoMessage() {}

func (x *CreditResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tolltax_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditResponse.ProtoReflect.Descriptor instead.
func (*CreditResponse) Descriptor() ([]byte, []int) {
	return file_tolltax_proto_rawDescGZIP(), []int{11}
}

func (x *CreditResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type CalculateAmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Car *Car `protobuf:"bytes,1,opt,name=car,proto3" json:"car,omitempty"`
}

func (x *CalculateAmountRequest) Reset() {
	*x = CalculateAmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tolltax_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateAmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateAmountRequest) ProtoMessage() {}

func (x *CalculateAmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tolltax_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateAmountRequest.ProtoReflect.Descriptor instead.
func (*CalculateAmountRequest) Descriptor() ([]byte, []int) {
	return file_tolltax_proto_rawDescGZIP(), []int{12}
}

func (x *CalculateAmountRequest) GetCar() *Car {
	if x != nil {
		return x.Car
	}
	return nil
}

type CalculateAmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deducible int32 `protobuf:"varint,1,opt,name=deducible,proto3" json:"deducible,omitempty"`
}

func (x *CalculateAmountResponse) Reset() {
	*x = CalculateAmountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tolltax_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateAmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateAmountResponse) ProtoMessage() {}

func (x *CalculateAmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tolltax_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateAmountResponse.ProtoReflect.Descriptor instead.
func (*CalculateAmountResponse) Descriptor() ([]byte, []int) {
	return file_tolltax_proto_rawDescGZIP(), []int{13}
}

func (x *CalculateAmountResponse) GetDeducible() int32 {
	if x != nil {
		return x.Deducible
	}
	return 0
}

type GetAllOwnersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner []*Owner `protobuf:"bytes,1,rep,name=owner,proto3" json:"owner,omitempty"`
}

func (x *GetAllOwnersResponse) Reset() {
	*x = GetAllOwnersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tolltax_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllOwnersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllOwnersResponse) ProtoMessage() {}

func (x *GetAllOwnersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tolltax_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllOwnersResponse.ProtoReflect.Descriptor instead.
func (*GetAllOwnersResponse) Descriptor() ([]byte, []int) {
	return file_tolltax_proto_rawDescGZIP(), []int{14}
}

func (x *GetAllOwnersResponse) GetOwner() []*Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

type GetAllOwnersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllOwnersRequest) Reset() {
	*x = GetAllOwnersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tolltax_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllOwnersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllOwnersRequest) ProtoMessage() {}

func (x *GetAllOwnersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tolltax_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllOwnersRequest.ProtoReflect.Descriptor instead.
func (*GetAllOwnersRequest) Descriptor() ([]byte, []int) {
	return file_tolltax_proto_rawDescGZIP(), []int{15}
}

var File_tolltax_proto protoreflect.FileDescriptor

var file_tolltax_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x74, 0x6f, 0x6c, 0x6c, 0x74, 0x61, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x22, 0x5b, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x67, 0x0a, 0x03, 0x43, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x61, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x6b,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x61, 0x72, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x61, 0x72, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x3e, 0x0a, 0x04, 0x4e, 0x65, 0x74,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x6b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x6b, 0x63, 0x61, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x66, 0x6b, 0x63, 0x61, 0x72, 0x69, 0x64, 0x22, 0x67, 0x0a, 0x09, 0x54, 0x6f, 0x6c,
	0x6c, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x6c, 0x6c, 0x62, 0x6f,
	0x6f, 0x74, 0x68, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x6c,
	0x6c, 0x62, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x33, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x46,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x65, 0x74,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x74,
	0x63, 0x52, 0x04, 0x6e, 0x65, 0x74, 0x63, 0x22, 0x42, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x46, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x66, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x66, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x13, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x46, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x66, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x66, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x61, 0x72, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x14,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x46, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x6f, 0x6b, 0x22, 0x48, 0x0a, 0x0d, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70,
	0x62, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x20,
	0x0a, 0x0e, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b,
	0x22, 0x4c, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x62, 0x6f, 0x6f,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x6f,
	0x6c, 0x6c, 0x42, 0x6f, 0x6f, 0x74, 0x68, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x74, 0x68, 0x22, 0x20,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b,
	0x22, 0x33, 0x0a, 0x16, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x03, 0x63, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x72,
	0x52, 0x03, 0x63, 0x61, 0x72, 0x22, 0x37, 0x0a, 0x17, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x64, 0x75, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x65, 0x64, 0x75, 0x63, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x37,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0xb3,
	0x03, 0x0a, 0x0e, 0x54, 0x6f, 0x6c, 0x6c, 0x54, 0x61, 0x78, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x43, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x46, 0x49,
	0x44, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x46, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x46, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x46, 0x49, 0x44, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x46, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x46, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x11, 0x44,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x19, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x74, 0x6f, 0x6c, 0x6c, 0x74, 0x61,
	0x78, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tolltax_proto_rawDescOnce sync.Once
	file_tolltax_proto_rawDescData = file_tolltax_proto_rawDesc
)

func file_tolltax_proto_rawDescGZIP() []byte {
	file_tolltax_proto_rawDescOnce.Do(func() {
		file_tolltax_proto_rawDescData = protoimpl.X.CompressGZIP(file_tolltax_proto_rawDescData)
	})
	return file_tolltax_proto_rawDescData
}

var file_tolltax_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_tolltax_proto_goTypes = []interface{}{
	(*Owner)(nil),                   // 0: pb.Owner
	(*Car)(nil),                     // 1: pb.Car
	(*Netc)(nil),                    // 2: pb.Netc
	(*TollBooth)(nil),               // 3: pb.TollBooth
	(*GenerateRFIDRequest)(nil),     // 4: pb.GenerateRFIDRequest
	(*GenerateRFIDResponse)(nil),    // 5: pb.GenerateRFIDResponse
	(*ValidateRFIDRequest)(nil),     // 6: pb.ValidateRFIDRequest
	(*ValidateRFIDResponse)(nil),    // 7: pb.ValidateRFIDResponse
	(*DeductRequest)(nil),           // 8: pb.DeductRequest
	(*DeductResponse)(nil),          // 9: pb.DeductResponse
	(*CreditRequest)(nil),           // 10: pb.CreditRequest
	(*CreditResponse)(nil),          // 11: pb.CreditResponse
	(*CalculateAmountRequest)(nil),  // 12: pb.CalculateAmountRequest
	(*CalculateAmountResponse)(nil), // 13: pb.CalculateAmountResponse
	(*GetAllOwnersResponse)(nil),    // 14: pb.GetAllOwnersResponse
	(*GetAllOwnersRequest)(nil),     // 15: pb.GetAllOwnersRequest
}
var file_tolltax_proto_depIdxs = []int32{
	2,  // 0: pb.GenerateRFIDRequest.netc:type_name -> pb.Netc
	0,  // 1: pb.DeductRequest.owner:type_name -> pb.Owner
	3,  // 2: pb.CreditRequest.booth:type_name -> pb.TollBooth
	1,  // 3: pb.CalculateAmountRequest.car:type_name -> pb.Car
	0,  // 4: pb.GetAllOwnersResponse.owner:type_name -> pb.Owner
	4,  // 5: pb.TollTaxService.GenerateRFID:input_type -> pb.GenerateRFIDRequest
	6,  // 6: pb.TollTaxService.ValidateRFID:input_type -> pb.ValidateRFIDRequest
	8,  // 7: pb.TollTaxService.DeductTransaction:input_type -> pb.DeductRequest
	10, // 8: pb.TollTaxService.CreditTransaction:input_type -> pb.CreditRequest
	12, // 9: pb.TollTaxService.CalculateDeductibleAmount:input_type -> pb.CalculateAmountRequest
	15, // 10: pb.TollTaxService.GetAllOwners:input_type -> pb.GetAllOwnersRequest
	5,  // 11: pb.TollTaxService.GenerateRFID:output_type -> pb.GenerateRFIDResponse
	7,  // 12: pb.TollTaxService.ValidateRFID:output_type -> pb.ValidateRFIDResponse
	9,  // 13: pb.TollTaxService.DeductTransaction:output_type -> pb.DeductResponse
	11, // 14: pb.TollTaxService.CreditTransaction:output_type -> pb.CreditResponse
	13, // 15: pb.TollTaxService.CalculateDeductibleAmount:output_type -> pb.CalculateAmountResponse
	14, // 16: pb.TollTaxService.GetAllOwners:output_type -> pb.GetAllOwnersResponse
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_tolltax_proto_init() }
func file_tolltax_proto_init() {
	if File_tolltax_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tolltax_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Owner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tolltax_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Car); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tolltax_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Netc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tolltax_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TollBooth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tolltax_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateRFIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tolltax_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateRFIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tolltax_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateRFIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tolltax_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateRFIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tolltax_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tolltax_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tolltax_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tolltax_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tolltax_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateAmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tolltax_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculateAmountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tolltax_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllOwnersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tolltax_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllOwnersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tolltax_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tolltax_proto_goTypes,
		DependencyIndexes: file_tolltax_proto_depIdxs,
		MessageInfos:      file_tolltax_proto_msgTypes,
	}.Build()
	File_tolltax_proto = out.File
	file_tolltax_proto_rawDesc = nil
	file_tolltax_proto_goTypes = nil
	file_tolltax_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TollTaxServiceClient is the client API for TollTaxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TollTaxServiceClient interface {
	GenerateRFID(ctx context.Context, in *GenerateRFIDRequest, opts ...grpc.CallOption) (*GenerateRFIDResponse, error)
	ValidateRFID(ctx context.Context, in *ValidateRFIDRequest, opts ...grpc.CallOption) (*ValidateRFIDResponse, error)
	DeductTransaction(ctx context.Context, in *DeductRequest, opts ...grpc.CallOption) (*DeductResponse, error)
	CreditTransaction(ctx context.Context, in *CreditRequest, opts ...grpc.CallOption) (*CreditResponse, error)
	CalculateDeductibleAmount(ctx context.Context, in *CalculateAmountRequest, opts ...grpc.CallOption) (*CalculateAmountResponse, error)
	GetAllOwners(ctx context.Context, in *GetAllOwnersRequest, opts ...grpc.CallOption) (*GetAllOwnersResponse, error)
}

type tollTaxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTollTaxServiceClient(cc grpc.ClientConnInterface) TollTaxServiceClient {
	return &tollTaxServiceClient{cc}
}

func (c *tollTaxServiceClient) GenerateRFID(ctx context.Context, in *GenerateRFIDRequest, opts ...grpc.CallOption) (*GenerateRFIDResponse, error) {
	out := new(GenerateRFIDResponse)
	err := c.cc.Invoke(ctx, "/pb.TollTaxService/GenerateRFID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tollTaxServiceClient) ValidateRFID(ctx context.Context, in *ValidateRFIDRequest, opts ...grpc.CallOption) (*ValidateRFIDResponse, error) {
	out := new(ValidateRFIDResponse)
	err := c.cc.Invoke(ctx, "/pb.TollTaxService/ValidateRFID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tollTaxServiceClient) DeductTransaction(ctx context.Context, in *DeductRequest, opts ...grpc.CallOption) (*DeductResponse, error) {
	out := new(DeductResponse)
	err := c.cc.Invoke(ctx, "/pb.TollTaxService/DeductTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tollTaxServiceClient) CreditTransaction(ctx context.Context, in *CreditRequest, opts ...grpc.CallOption) (*CreditResponse, error) {
	out := new(CreditResponse)
	err := c.cc.Invoke(ctx, "/pb.TollTaxService/CreditTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tollTaxServiceClient) CalculateDeductibleAmount(ctx context.Context, in *CalculateAmountRequest, opts ...grpc.CallOption) (*CalculateAmountResponse, error) {
	out := new(CalculateAmountResponse)
	err := c.cc.Invoke(ctx, "/pb.TollTaxService/CalculateDeductibleAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tollTaxServiceClient) GetAllOwners(ctx context.Context, in *GetAllOwnersRequest, opts ...grpc.CallOption) (*GetAllOwnersResponse, error) {
	out := new(GetAllOwnersResponse)
	err := c.cc.Invoke(ctx, "/pb.TollTaxService/GetAllOwners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TollTaxServiceServer is the server API for TollTaxService service.
type TollTaxServiceServer interface {
	GenerateRFID(context.Context, *GenerateRFIDRequest) (*GenerateRFIDResponse, error)
	ValidateRFID(context.Context, *ValidateRFIDRequest) (*ValidateRFIDResponse, error)
	DeductTransaction(context.Context, *DeductRequest) (*DeductResponse, error)
	CreditTransaction(context.Context, *CreditRequest) (*CreditResponse, error)
	CalculateDeductibleAmount(context.Context, *CalculateAmountRequest) (*CalculateAmountResponse, error)
	GetAllOwners(context.Context, *GetAllOwnersRequest) (*GetAllOwnersResponse, error)
}

// UnimplementedTollTaxServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTollTaxServiceServer struct {
}

func (*UnimplementedTollTaxServiceServer) GenerateRFID(context.Context, *GenerateRFIDRequest) (*GenerateRFIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRFID not implemented")
}
func (*UnimplementedTollTaxServiceServer) ValidateRFID(context.Context, *ValidateRFIDRequest) (*ValidateRFIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateRFID not implemented")
}
func (*UnimplementedTollTaxServiceServer) DeductTransaction(context.Context, *DeductRequest) (*DeductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeductTransaction not implemented")
}
func (*UnimplementedTollTaxServiceServer) CreditTransaction(context.Context, *CreditRequest) (*CreditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditTransaction not implemented")
}
func (*UnimplementedTollTaxServiceServer) CalculateDeductibleAmount(context.Context, *CalculateAmountRequest) (*CalculateAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateDeductibleAmount not implemented")
}
func (*UnimplementedTollTaxServiceServer) GetAllOwners(context.Context, *GetAllOwnersRequest) (*GetAllOwnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOwners not implemented")
}

func RegisterTollTaxServiceServer(s *grpc.Server, srv TollTaxServiceServer) {
	s.RegisterService(&_TollTaxService_serviceDesc, srv)
}

func _TollTaxService_GenerateRFID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRFIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TollTaxServiceServer).GenerateRFID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TollTaxService/GenerateRFID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TollTaxServiceServer).GenerateRFID(ctx, req.(*GenerateRFIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TollTaxService_ValidateRFID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRFIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TollTaxServiceServer).ValidateRFID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TollTaxService/ValidateRFID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TollTaxServiceServer).ValidateRFID(ctx, req.(*ValidateRFIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TollTaxService_DeductTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TollTaxServiceServer).DeductTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TollTaxService/DeductTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TollTaxServiceServer).DeductTransaction(ctx, req.(*DeductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TollTaxService_CreditTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TollTaxServiceServer).CreditTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TollTaxService/CreditTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TollTaxServiceServer).CreditTransaction(ctx, req.(*CreditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TollTaxService_CalculateDeductibleAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TollTaxServiceServer).CalculateDeductibleAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TollTaxService/CalculateDeductibleAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TollTaxServiceServer).CalculateDeductibleAmount(ctx, req.(*CalculateAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TollTaxService_GetAllOwners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOwnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TollTaxServiceServer).GetAllOwners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TollTaxService/GetAllOwners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TollTaxServiceServer).GetAllOwners(ctx, req.(*GetAllOwnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TollTaxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TollTaxService",
	HandlerType: (*TollTaxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateRFID",
			Handler:    _TollTaxService_GenerateRFID_Handler,
		},
		{
			MethodName: "ValidateRFID",
			Handler:    _TollTaxService_ValidateRFID_Handler,
		},
		{
			MethodName: "DeductTransaction",
			Handler:    _TollTaxService_DeductTransaction_Handler,
		},
		{
			MethodName: "CreditTransaction",
			Handler:    _TollTaxService_CreditTransaction_Handler,
		},
		{
			MethodName: "CalculateDeductibleAmount",
			Handler:    _TollTaxService_CalculateDeductibleAmount_Handler,
		},
		{
			MethodName: "GetAllOwners",
			Handler:    _TollTaxService_GetAllOwners_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tolltax.proto",
}
